+slide(data-background="#b5533c")
  +slide
    h2 Mokování v Jest

    p(style="text-align:left")
      | Jest obsahuje velice silnou sadu nástrojů pro odstínění závislostí:

      p(style="text-align:left; padding-left: 5px")
        strong Špion&nbsp;
        | - pomocí metody&nbsp;
        code spyOn
        | &nbsp;pouze sbírá data, neprogramuje chování

      p(style="text-align:left; padding-left: 5px")
        strong Automatické mocky&nbsp;
        | - vytvořené pomocí&nbsp;
        code jest.mock
        | &nbsp;nebo vše pomocí&nbsp;
        code jest.enableAutomock
        | &nbsp;

      p(style="text-align:left; padding-left: 5px")
        strong Manuální mocky
        | - v případě že programovatelné mocky nevyhovují (např. použití promises),
        | modifikace s každou změnou API

  +slide
    h3 Spying

    pre
      code.hljs(data-trim contenteditable style="max-height:500px").
        // counter.js
        const count = 5;
        module.exports = {
          getCount: () =&gt; count;
        };

        // app.js
        const counter = require("./counter");

        module.exports = counter.getCount(); // will return 5

        // counter.test.js
        const counter = require("./counter");
        const getCountSpy = jest.spyOn(counter, "getCount");

        const appCount = require("./app.js");

        test("app use spied counter", () =&gt; {
          expect(appCount).toEqual(5); // test succeed!
          expect(getCountSpy).toHaveBeenCalled();
        });

  +slide
    h3 Auto mocking

    pre
      code.hljs(data-trim contenteditable style="max-height:430px").
        // counter.js
        const count = 5;
        module.exports = {
          getCount: () =&gt; count;
        };

        // app.js
        const counter = require("./counter");

        module.exports = counter.getCount(); // will return 'undefined'

        // counter.test.js
        jest.mock("./counter"); // optional second parameter is implementation
        const appCount = require("./app.js");

        test("app use mocked counter", () =&gt; {
          expect(appCount).toEqual(5); // test fail!
        });

  +slide
    h3 Manual mocking

    pre
      code.hljs(data-trim contenteditable style="max-height:600px").
        // counter.js
        const count = 5;
        module.exports = {
          getCount: () =&gt; count;
        };

        // app.js
        const counter = require("./counter");

        module.exports = counter.getCount(); // will return 'undefined'

        // __mocks__/counter.js
        let fakeCount = 0;

        module.exports = {
          __setFakeCount: function () {
            fakeCount = count;
          },
          getCount: () =&gt; fakeCount
        }

        // counter.test.js
        jest.mock("./counter");
        require("./counter").__setFakeCount(26);

        const appCount = require("./app.js");

        test("app use mocked counter", () =&gt; {
          expect(appCount).toEqual(5); // test fail!
          expect(appCount).toEqual(26); // test succeed!
        });

  +slide
    h2 Timery 
    
    p Pro práci s timery je potřeba převzít absolutní kontrolu
    pre
      code.hljs(data-trim contenteditable style="max-height:430px").
        test("jest fake timers", () =&gt; {
          let counter = 0
          jest.useFakeTimers();

          expect(counter).toBe(0);

          setInterval(() =&gt; counter = counter + 1, 100);

          expect(counter).toBe(0);

          jest.runTimersToTime(110)

          expect(counter).toBe(1);

          jest.runTimersToTime(110)
          
          expect(counter).toBe(2);
        });

  +slide
    h3 Datumy a náhodná&nbsp;čísla

    p 
      | Pomocí Jest se s datumy a náhodnými čísly pracuje stejně jako při mockování
      | jakékoliv jiné funkce či objektu.

    pre
      code.hljs(data-trim contenteditable).
        test("dates", () =&gt; {
          global.Date = jest.fn();

          const ts = new Date();
          
          expect(ts).toBeInstanceOf(Date);
          expect(ts).toEqual(global.Date.mock.instances[0]);
        });

        const = getRand () =&gt; Math.round(Math.random() * 10);

        test("random numbers", () =&gt; {
          Math.random = jest.fn().mockReturnValue(0.234234);
          
          expect(getRand()).toEqual(2);
        });

