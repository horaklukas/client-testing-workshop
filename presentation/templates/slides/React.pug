+slide(data-background="#b5533c")
  +slide
    h3 Testování React komponent

    p 
      | Nejlépe se testují ve virtuálním DOMu. Skvělým nástrojem je 
      strong Enzyme 
      | který umožňuji více typů renderování komponenty.

    +describe("Pro testování jsou zásadní dva typy rendererů").left
      ul
        li 
          strong Shallow
          | - vyrenderuje se jen komponenta, její subkompoenty jsou "mocknuty" ⇒ unit testování
        li 
          strong Mount 
          | - vyrenderuje se komponenta včetně reálných subkomponent ⇒ integrační testování

  +slide
    h3 Použití shallow rendereru

    pre(style="width:95%")
      code.hljs(data-trim contenteditable style="max-height: 600px").
        const Panel = ({channels, filter, onFilterChange}) =&gt; (
          &lt;div className="panel"&gt;
            &lt;ChannelsList channels={channels} /&gt;
            &lt;Filter value={filter} onChange={onFilterChange} /&gt;
          &lt;/div&gt;
        )

        it("render channelsList", () =&gt; {
          const panel = shallow(&lt;Panel filter="" channels={fakeData} /&gt;);
          const list = panel.find(ChannelsList);

          expect(list.prop("channels")).toEqual(fakeData);
        });

        it("render filter", () =&gt; {
          const onChangeCb = jest.fn();
          const panel = shallow(
            &lt;Panel filter="Bal" onFilterChange={onChangeCb} channels={fakeData} /&gt;
          );
          const filter = panel.find(Filter);

          expect(filter.prop("value")).toBe("Bal");
          expect(filter.prop("onChange")).toBe(onChangeCb);

        });

  +slide
    h3 Testování událostí
    p 
      | JS události se dají simulovat pomocí metody 
      code simulate
      |.
      br 
      | Je tu ale pár věcí které je potřeba mít na paměti :

    ul
      li Event object musí být vždy vytvořen manuálně, je-li potřeba
      li 
        | Při použití shallow rendereru 
        strong simulate 
        | nefunguje pro subkomponenty (lze obejít provoláním callbacku)

  +slide
    h3 Příklad testování událostí
    
    pre(style="width:100%")
      code.hljs(data-trim contenteditable style="max-height: 550px").
        const Filter = ({value, onChange}: Props) =&gt; (
          &lt;div className="container"&gt;
            &lt;input value={value || ""} 
                   onChange={(ev) =&gt; onChange(ev.target.value)} /&gt;

            &lt;button onClick={() =&gt; onChange("")}&gt;Clear&lt;/button&gt;
          &lt;/div&gt;
        );

        it("invoke onChange callback every time input change", () =&gt; {
          const onChangeSpy = jest.fn();
          const offer = shallow(&lt;Filter value={null} onChange={onChangeSpy} /&gt;);
          const input = offer.find("input");

          input.simulate("onChange")({target: {value: "L"}});
          input.simulate("onChange")({target: {value: "Lon"}});

          expect(onChangeSpy.mock.calls.length).toBe(2);
          expect(onChangeSpy.mock.calls[0][0]).toBe("L");
          expect(onChangeSpy.mock.calls[1][0]).toBe("Lon");
        });

        it("invoke onChange callback on Clear button click", () =&gt; {
          const onChangeSpy = jest.fn();
          const offer = shallow(&lt;Filter value={null} onChange={onChangeSpy} /&gt;);
          const button = offer.find("button");

          button.simulate("click");

          expect(onChangeSpy.mock.calls.length).toBe(1);
          expect(onChangeSpy.mock.calls[0][0]).toBe("");
        });
