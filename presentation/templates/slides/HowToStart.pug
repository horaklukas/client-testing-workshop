+slide
  h2 Jdu do toho! Ale jak?

  p Nejlépe pomalu a postupně &#9786;

  ul
    li Nastuduj základy (typy testů, výhody, problémy)
      small
        | Je důležité vědět co je potřeba jak otestovat, kdy stačí základní testy,
        | jaké to které testování může přinášet problémy.

    li Začni od jednodušších
      small
        | Postupně rozvíjej pokrytí testy, uč se pocitu důvěry ve vlastní kód 
        | podepřený testy.


    li Vytrvej v psaní testů
      small
        | V kritický situacích je jednodušší si ospravedlnit netestování, ale
        | právě v tu chvíli je to nejdůležitější. Testuj kritické části a
        | složitější algoritmy.

    li
      | Když nevíš jak, napiš kostru a skipni test,&nbsp;
      strong nemaž ho!
      small
        | Testy se vždy dají dopisovat, důležité je snažit se přijít na maximum
        | případů, které mohou nastat a otestovat si je, případně si je "nadepsat".

    li Bav se testováním! Gamifikuj
      small
        | I psaní testů je vývoj, nejsou potřeba tak složité algoritmy a pro někoho
        | to je i velká zábava.

+slide
  h2 Takže co musím vědět?

  p(style="float: right; width: 45%")
    img(src="https://martinfowler.com/bliki/images/testPyramid/test-pyramid.png" style="margin: 0")
    span.image-title zdroj: https://martinfowler.com/bliki/images/testPyramid/

  div(style="width: 55%")
    p(style="text-align: left") Typy testů:

    ol
      li Jednotkové (unitové)
        small
          | Malé, rychlé, testují API jednotky, představují 
          strong základ testování
        // img.text-icon(src="https://d30y9cdsu7xlg0.cloudfront.net/png/8205-200.png")
      li Integrační
        small
          | Složitější, pomalejší, testují napojení jednotek, náročnější na zdroje (db, fs)

      li E2E (funkcionální, akceptační)
        small
          | Pomalé, náročnější, "křehké", představují reálné scénáře, test UI

  blockquote(
    cite=" https://martinfowler.com/bliki/images/testPyramid/"
    style="width:90%; text-align:justify"
  ) &ldquo;GUI testy jsou až druhá vlna obrany proti chybám. Pokud vám najdou test, znamená to, že vám chybí nebo nefunguje nějaký unit test. Vždy by jste měli mít mnohem víc unit testů než UI testů.&rdquo;
    br
    small(style="float:right") Martin Fowler
    hr(width="0")

+slide
  h2 Terminologie

  +describe('Test Case').left
    ul
      li Sada testů pro určitou oblast kódu/aplikace 
      li Většinou samostatný soubor

  +describe('Mock/Stub/Spy').left
    ul
      li Dvojníci reálných objektů
      li Testování chování vs. testování stavu 
      li Simulace chování reálného objetu

+slide
  h2 A co nástroje?

  +describe('Testovací framework (QUnit, Mocha, Jest, Jasmine)').left
    ul
      li Řídí spouštění testů (setup, teardown, skip, focus). 
      li Stará se o produkování výsledků testu.

  +describe('Asertační funkce (Expect.js, Should.js, Node.js Assert)').left
    ul
      li Jsou často součástí testovacího frameworku.
      li Porovnávají očekávání a skutečnost (toBe, toEqual, toThrow).

  +describe('Mockovací nástroje (Sinon.js, Jasmine/Jest built-in)').left
    ul
      li Mohou být součástí testovacího frameworku.
      li Izolují závislosti testovaných jednotek.
