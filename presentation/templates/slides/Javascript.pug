+slide(
  data-transition="slide"
  data-background="#b5533c"
  data-background-transition="zoom"
)
  h2 Testování v JS

  p Je obecně mnohem snažší než v jiných programovacích jazycích.
  p Lépe se pracuje s mockovaním, a snáze se testuje GUI.

+slide(data-background="#b5533c")
  h2 Prostředí
  
  +describe("Simulované").left
    ul
      li headless prohlížeče, virtuální implementace DOMu
      li automatizované spouštění testů
      li rychlý běh testů
      li možné odchylky od reálného prostředí
    
  +describe("Reálné").left
    ul
      li skutečné prohlížeče
      li spouštění buď ručně, nebo pomocí test runneru (např. Karma)
      li pomalejší vyhodnocení sady testů
      li reflektuje reálné podmínky pro běh aplikace

+slide(data-background="#b5533c")
  +slide(data-background="#b5533c")
    h2 Testování async kódu

    p
      | Testovací FW obvykle předpokládá synchronní kód a konec po posledním statementu.
    p 
      | FW má ale většinou mechanismy pro vypořádání se s asynchronitou (callbacks, promises).
    p
      | Je potřeba dát pozor na to, zda opravdu dojde k otestování, ale při TDD nemůže nastat problém.

  +slide(data-background="#b5533c")
    h3 Test asynchroní metody
    p Testovací FW se musí nějak dozvědět kdy je konec testu.

    pre
      code.hljs(data-trim contenteditable).
        fetchTargets = function(filter, cb) {
          fetch("/targets", function(err, data) {
            // here could be some data manipulation, eg. filtering

            cb({ targets: data });
          })
        }

        test("method fetchTargets respond structured data", function(done) {
          const fakeData = ['faketarget 1', 'faketarget 2', 'faketarget 3'];
          fetchMock.mockImplementation((cb) =&gt; cb(fakeData))

          fetchTargets(null, function(target) {
            expect(targets).toEqual({targets: fakeData});
            done();
          })
        });


