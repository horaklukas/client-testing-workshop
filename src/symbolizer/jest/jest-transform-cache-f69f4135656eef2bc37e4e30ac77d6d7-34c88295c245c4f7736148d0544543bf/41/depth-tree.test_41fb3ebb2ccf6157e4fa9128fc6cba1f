'use strict';



jest.mock('../../utils/symbol-preview-utils');
jest.mock('../../utils/milstd-string');var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _react = require('react');var _react2 = _interopRequireDefault(_react);var _enzyme = require('enzyme');var _depthTree = require('../depth-tree');var _depthTree2 = _interopRequireDefault(_depthTree);

var _levelSelector = require('../level-selector');var _levelSelector2 = _interopRequireDefault(_levelSelector);
var _symbolSelector = require('../symbol-selector');var _symbolSelector2 = _interopRequireDefault(_symbolSelector);
var _symbolPreviewUtils = require('../../utils/symbol-preview-utils');var _symbolPreviewUtils2 = _interopRequireDefault(_symbolPreviewUtils);
var _milstdString = require('../../utils/milstd-string');var _milstdString2 = _interopRequireDefault(_milstdString);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


describe('Depth Tree component', function () {
  var data = {
    0: [
    { id: 1, title: '100', value: { symbolId: null, dimension: null } },
    { id: 2, title: '200', value: { symbolId: '200', dimension: 'A' } }],

    1: [
    { id: 3, title: '110', value: { symbolId: '110', dimension: 'B' } },
    { id: 4, title: '120', value: { symbolId: null, dimension: null } },
    { id: 6, title: '130', value: { symbolId: '  ', dimension: null } }],

    4: [{ id: 5, title: '121', value: { symbolId: '121', dimension: 'C' } }],
    6: [{ id: 7, title: '122', value: { symbolId: '122', dimension: 'D' } }] };

  var props = {
    data: data,
    level: null,
    selected: {} };


  beforeAll(function () {
    _symbolPreviewUtils2.default.isSymbolIdEmpty.mockImplementation(function (id) {
      switch (id) {
        case '200':
        case '110':
        case '121':
        case '122':
          return false;
        case '  ':
          return true;
        default:
          return undefined;}

    });

    /*milstdUtilsMock.getDimensionCharByDimension.mockImplementation((arg) => {
            switch(arg) {
              case null:
              case 'A':
              case 'B':
              case 'C':
              case 'D':
                return arg;
              default:
                return undefined;
            }
        });*/
  });

  it('should render nothing when no tree data provided', function () {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_depthTree2.default, _extends({}, props, { data: {} })));

    var levels = wrapper.find(_levelSelector2.default);
    expect(levels).toHaveLength(0);

    var symbols = wrapper.find(_symbolSelector2.default);
    expect(symbols).toHaveLength(0);

    wrapper.setProps({
      data: null });


    levels = wrapper.find(_levelSelector2.default);
    expect(levels).toHaveLength(0);

    symbols = wrapper.find(_symbolSelector2.default);
    expect(symbols).toHaveLength(0);
  });

  it('should create level selector for each node with children', function () {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_depthTree2.default, _extends({}, props, { data: data, level: 1 })));
    var levels = wrapper.find(_levelSelector2.default);

    expect(levels).toHaveLength(2);
    expect(levels.get(0).props).toHaveProperty('title', '120');
    expect(levels.get(0).props).toHaveProperty('id', 4);
    expect(levels.get(1).props).toHaveProperty('title', '130');
    expect(levels.get(1).props).toHaveProperty('id', 6);
  });

  it('should create symbol selector for each node with symbolId', function () {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_depthTree2.default, _extends({}, props, { data: data, level: 1 })));
    var symbols = wrapper.find(_symbolSelector2.default);

    expect(symbols).toHaveLength(1);
    expect(symbols.get(0).props).toHaveProperty('title', '110');
    expect(symbols.get(0).props).toHaveProperty('value', {
      symbolId: '110',
      dimension: 'B' });

  });

  it('should not mark symbol selector as active if milstd equals to selected but name not', function () {
    var level = 6;
    var selected = data[level][0].value;
    selected.name = '123';

    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_depthTree2.default, _extends({}, props, { level: level, selected: selected })));

    var symbols = wrapper.find(_symbolSelector2.default);
    expect(symbols.get(0).props).toHaveProperty('active', false);
  });

  it('should mark symbol selector as active if milstd and name equals to selected', function () {
    var level = 6;
    var selected = data[level][0].value;
    selected.name = data[level][0].title;

    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_depthTree2.default, _extends({}, props, { level: level, selected: selected })));

    var symbols = wrapper.find(_symbolSelector2.default);
    expect(symbols.get(0).props).toHaveProperty('active', true);
  });

  it('should mark symbol selector as active if milstd not equals to selected', function () {
    var selected = data[6][0].value;

    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_depthTree2.default, _extends({}, props, { level: 4, selected: selected })));

    var symbols = wrapper.find(_symbolSelector2.default);
    expect(symbols.get(0).props).toHaveProperty('active', false);
  });

  it('should display first level when no level active', function () {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_depthTree2.default, props));

    var levels = wrapper.find(_levelSelector2.default);
    var symbols = wrapper.find(_symbolSelector2.default);

    expect(levels).toHaveLength(1);
    expect(symbols).toHaveLength(1);
    expect(levels.get(0).props).toHaveProperty('title', '100');
    expect(levels.get(0).props).toHaveProperty('id', 1);
    expect(symbols.get(0).props).toHaveProperty('title', '200');
    expect(symbols.get(0).props).toHaveProperty('value', {
      symbolId: '200',
      dimension: 'A' });

  });
});