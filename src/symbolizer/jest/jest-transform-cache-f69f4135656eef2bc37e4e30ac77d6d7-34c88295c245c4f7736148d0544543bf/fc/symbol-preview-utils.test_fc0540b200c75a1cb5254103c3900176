'use strict';var _symbolPreviewUtils = require('../symbol-preview-utils');var _symbolPreviewUtils2 = _interopRequireDefault(_symbolPreviewUtils);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Symbol preview utils', function () {
  describe('method parseSymbolFromApp6Data', function () {
    var testApp6Data = [
    '/usr/share/fonts/truetype/milstan.ttf',
    '2', 'ffff00', '97', '77',
    'Font family:MILSTD2525AIR',
    'Font alias:Milair'];

    var parsed = _symbolPreviewUtils2.default.parseSymbolFromApp6Data(testApp6Data);
    var code2char = function code2char(code) {return String.fromCharCode(code);};

    it('should parse font path from string and get correct font name', function () {
      expect(parsed).toHaveProperty('font', 'MILSTD2525AIR');
    });
    it('should parse color from string', function () {
      expect(parsed).toHaveProperty('color', 'ffff00');
    });
    it('should parse next count of charcodes and convert them to string', function () {
      var requiredString = code2char('97') + code2char('77') + '\0';

      expect(parsed).toHaveProperty('chars', requiredString);

      var secondApp6Str = ['/usr/share/fonts/truetype/milstan.ttf', '5', 'ffff00', '92', '75', '68', '99', '115', 'Font family:MILSTD2525AIR'];
      requiredString = code2char('92') + code2char('75') + code2char('68') + code2char('99') + code2char('115') + '\0';

      expect(_symbolPreviewUtils2.default.parseSymbolFromApp6Data(secondApp6Str)).toHaveProperty('chars', requiredString);
    });

    it('should parse font alias from string', function () {
      expect(parsed).toHaveProperty('fontAlias', 'Milair');
    });
  });
  describe('method getDefenceSymbolByPriority', function () {
    it('should make defence symbol from small symbols when symbol not defined', function () {
      var priority = 6;
      var expectedDefenceSymbol = String.fromCharCode(96 + priority);

      expect(_symbolPreviewUtils2.default.getDefenceSymbolByPriority(priority, '')).toEqual(expectedDefenceSymbol);
      expect(_symbolPreviewUtils2.default.getDefenceSymbolByPriority(priority)).toEqual(expectedDefenceSymbol);
    });
    it('should make defence symbol from large symbols when symbol is defined', function () {
      var priority = 3;

      expect(_symbolPreviewUtils2.default.getDefenceSymbolByPriority(priority, 'CS')).toEqual(String.fromCharCode(64 + priority));
    });
  });
  describe('isSymbolIdEmpty', function () {
    it('should return true when symbolId has only white space characters', function () {
      expect(_symbolPreviewUtils2.default.isSymbolIdEmpty('     ')).toBe(true);
      expect(_symbolPreviewUtils2.default.isSymbolIdEmpty('')).toBe(true);
    });
    it('should return true when symbolId equal to ------', function () {
      expect(_symbolPreviewUtils2.default.isSymbolIdEmpty('------')).toBe(true);
    });
    it('should return false when symbolId is valid non-empty string', function () {
      expect(_symbolPreviewUtils2.default.isSymbolIdEmpty('adS')).toBe(false);
    });
  });
});