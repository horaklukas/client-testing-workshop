/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var cov_w53fvlrtc = function () {var path = '/home/app/symbolizer/src/utils/tree-utils.js',hash = '3f734b1c61f55be065af228531640fdba0b538d5',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/home/app/symbolizer/src/utils/tree-utils.js', statementMap: { '0': { start: { line: 1, column: 40 }, end: { line: 56, column: 1 } }, '1': { start: { line: 2, column: 13 }, end: { line: 2, column: 15 } }, '2': { start: { line: 3, column: 18 }, end: { line: 3, column: 23 } }, '3': { start: { line: 5, column: 16 }, end: { line: 5, column: 26 } }, '4': { start: { line: 6, column: 2 }, end: { line: 6, column: 23 } }, '5': { start: { line: 8, column: 2 }, end: { line: 53, column: 3 } }, '6': { start: { line: 9, column: 16 }, end: { line: 9, column: 21 } }, '7': { start: { line: 12, column: 4 }, end: { line: 46, column: 5 } }, '8': { start: { line: 13, column: 18 }, end: { line: 13, column: 31 } }, '9': { start: { line: 15, column: 6 }, end: { line: 41, column: 7 } }, '10': { start: { line: 16, column: 18 }, end: { line: 16, column: 26 } }, '11': { start: { line: 17, column: 23 }, end: { line: 17, column: 55 } }, '12': { start: { line: 18, column: 21 }, end: { line: 18, column: 54 } }, '13': { start: { line: 20, column: 8 }, end: { line: 37, column: 9 } }, '14': { start: { line: 23, column: 12 }, end: { line: 26, column: 15 } }, '15': { start: { line: 27, column: 12 }, end: { line: 27, column: 18 } }, '16': { start: { line: 32, column: 12 }, end: { line: 32, column: 18 } }, '17': { start: { line: 36, column: 11 }, end: { line: 36, column: 20 } }, '18': { start: { line: 39, column: 8 }, end: { line: 39, column: 21 } }, '19': { start: { line: 40, column: 8 }, end: { line: 40, column: 14 } }, '20': { start: { line: 43, column: 6 }, end: { line: 45, column: 7 } }, '21': { start: { line: 44, column: 8 }, end: { line: 44, column: 14 } }, '22': { start: { line: 47, column: 4 }, end: { line: 52, column: 5 } }, '23': { start: { line: 48, column: 6 }, end: { line: 48, column: 22 } }, '24': { start: { line: 50, column: 6 }, end: { line: 50, column: 41 } }, '25': { start: { line: 51, column: 6 }, end: { line: 51, column: 26 } }, '26': { start: { line: 55, column: 2 }, end: { line: 55, column: 14 } }, '27': { start: { line: 60, column: 16 }, end: { line: 60, column: 23 } }, '28': { start: { line: 62, column: 22 }, end: { line: 69, column: 5 } }, '29': { start: { line: 63, column: 6 }, end: { line: 68, column: 7 } }, '30': { start: { line: 65, column: 8 }, end: { line: 65, column: 36 } }, '31': { start: { line: 67, column: 8 }, end: { line: 67, column: 20 } }, '32': { start: { line: 71, column: 4 }, end: { line: 71, column: 71 } }, '33': { start: { line: 75, column: 16 }, end: { line: 75, column: 26 } }, '34': { start: { line: 76, column: 17 }, end: { line: 76, column: 24 } }, '35': { start: { line: 78, column: 22 }, end: { line: 85, column: 5 } }, '36': { start: { line: 79, column: 29 }, end: { line: 79, column: 86 } }, '37': { start: { line: 80, column: 25 }, end: { line: 80, column: 43 } }, '38': { start: { line: 84, column: 6 }, end: { line: 84, column: 77 } }, '39': { start: { line: 87, column: 4 }, end: { line: 87, column: 75 } } }, fnMap: { '0': { name: '(anonymous_0)', decl: { start: { line: 1, column: 40 }, end: { line: 1, column: 41 } }, loc: { start: { line: 1, column: 73 }, end: { line: 56, column: 1 } }, line: 1 }, '1': { name: '(anonymous_1)', decl: { start: { line: 59, column: 24 }, end: { line: 59, column: 25 } }, loc: { start: { line: 59, column: 40 }, end: { line: 72, column: 3 } }, line: 59 }, '2': { name: '(anonymous_2)', decl: { start: { line: 62, column: 22 }, end: { line: 62, column: 23 } }, loc: { start: { line: 62, column: 50 }, end: { line: 69, column: 5 } }, line: 62 }, '3': { name: '(anonymous_3)', decl: { start: { line: 74, column: 35 }, end: { line: 74, column: 36 } }, loc: { start: { line: 74, column: 61 }, end: { line: 88, column: 3 } }, line: 74 }, '4': { name: '(anonymous_4)', decl: { start: { line: 78, column: 22 }, end: { line: 78, column: 23 } }, loc: { start: { line: 78, column: 50 }, end: { line: 85, column: 5 } }, line: 78 } }, branchMap: { '0': { loc: { start: { line: 20, column: 8 }, end: { line: 37, column: 9 } }, type: 'switch', locations: [{ start: { line: 22, column: 10 }, end: { line: 27, column: 18 } }, { start: { line: 30, column: 10 }, end: { line: 32, column: 18 } }, { start: { line: 35, column: 10 }, end: { line: 36, column: 20 } }], line: 20 }, '1': { loc: { start: { line: 43, column: 6 }, end: { line: 45, column: 7 } }, type: 'if', locations: [{ start: { line: 43, column: 6 }, end: { line: 45, column: 7 } }, { start: { line: 43, column: 6 }, end: { line: 45, column: 7 } }], line: 43 }, '2': { loc: { start: { line: 47, column: 4 }, end: { line: 52, column: 5 } }, type: 'if', locations: [{ start: { line: 47, column: 4 }, end: { line: 52, column: 5 } }, { start: { line: 47, column: 4 }, end: { line: 52, column: 5 } }], line: 47 }, '3': { loc: { start: { line: 63, column: 6 }, end: { line: 68, column: 7 } }, type: 'if', locations: [{ start: { line: 63, column: 6 }, end: { line: 68, column: 7 } }, { start: { line: 63, column: 6 }, end: { line: 68, column: 7 } }], line: 63 }, '4': { loc: { start: { line: 63, column: 9 }, end: { line: 63, column: 46 } }, type: 'binary-expr', locations: [{ start: { line: 63, column: 9 }, end: { line: 63, column: 34 } }, { start: { line: 63, column: 38 }, end: { line: 63, column: 46 } }], line: 63 }, '5': { loc: { start: { line: 79, column: 29 }, end: { line: 79, column: 86 } }, type: 'binary-expr', locations: [{ start: { line: 79, column: 29 }, end: { line: 79, column: 51 } }, { start: { line: 79, column: 55 }, end: { line: 79, column: 86 } }], line: 79 }, '6': { loc: { start: { line: 84, column: 13 }, end: { line: 84, column: 76 } }, type: 'cond-expr', locations: [{ start: { line: 84, column: 44 }, end: { line: 84, column: 49 } }, { start: { line: 84, column: 53 }, end: { line: 84, column: 75 } }], line: 84 }, '7': { loc: { start: { line: 84, column: 13 }, end: { line: 84, column: 41 } }, type: 'binary-expr', locations: [{ start: { line: 84, column: 13 }, end: { line: 84, column: 27 } }, { start: { line: 84, column: 31 }, end: { line: 84, column: 41 } }], line: 84 }, '8': { loc: { start: { line: 84, column: 53 }, end: { line: 84, column: 75 } }, type: 'cond-expr', locations: [{ start: { line: 84, column: 64 }, end: { line: 84, column: 68 } }, { start: { line: 84, column: 71 }, end: { line: 84, column: 75 } }], line: 84 } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0, '23': 0, '24': 0, '25': 0, '26': 0, '27': 0, '28': 0, '29': 0, '30': 0, '31': 0, '32': 0, '33': 0, '34': 0, '35': 0, '36': 0, '37': 0, '38': 0, '39': 0 }, f: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0 }, b: { '0': [0, 0, 0], '1': [0, 0], '2': [0, 0], '3': [0, 0], '4': [0, 0], '5': [0, 0], '6': [0, 0], '7': [0, 0], '8': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();++cov_w53fvlrtc.s[0];var findValueAtTreeAndGetPathToRoot = function findValueAtTreeAndGetPathToRoot(key, value, tree, decideFnc) {/* istanbul ignore next */++cov_w53fvlrtc.f[0];
  var path = /* istanbul ignore next */(++cov_w53fvlrtc.s[1], []);
  var completed = /* istanbul ignore next */(++cov_w53fvlrtc.s[2], false);

  var foundBy = /* istanbul ignore next */(++cov_w53fvlrtc.s[3], { id: null }); /* istanbul ignore next */++cov_w53fvlrtc.s[4];
  foundBy[key] = value; /* istanbul ignore next */++cov_w53fvlrtc.s[5];

  while (completed === false) {
    var found = /* istanbul ignore next */(++cov_w53fvlrtc.s[6], false);
    var levelId = /* istanbul ignore next */void 0; /* istanbul ignore next */++cov_w53fvlrtc.s[7];

    for (levelId in tree) {
      var level = /* istanbul ignore next */(++cov_w53fvlrtc.s[8], tree[levelId]); /* istanbul ignore next */++cov_w53fvlrtc.s[9];

      for (var j = 0; j < level.length; j++) {
        var obj = /* istanbul ignore next */(++cov_w53fvlrtc.s[10], level[j]);
        var idEquals = /* istanbul ignore next */(++cov_w53fvlrtc.s[11], obj.id.toString() === foundBy.id);
        var result = /* istanbul ignore next */(++cov_w53fvlrtc.s[12], decideFnc(obj, foundBy, idEquals)); /* istanbul ignore next */++cov_w53fvlrtc.s[13];

        switch (result) {
          // found, add to path
          case true: /* istanbul ignore next */++cov_w53fvlrtc.b[0][0];++cov_w53fvlrtc.s[14];
            path.unshift({
              id: obj.id,
              title: obj.title }); /* istanbul ignore next */++cov_w53fvlrtc.s[15];

            break;

          // found but dont add to path
          case false: /* istanbul ignore next */++cov_w53fvlrtc.b[0][1];++cov_w53fvlrtc.s[16];
            // nothing
            break;

          // not found
          case null: /* istanbul ignore next */++cov_w53fvlrtc.b[0][2];++cov_w53fvlrtc.s[17];
            continue;} /* istanbul ignore next */++cov_w53fvlrtc.s[18];


        found = true; /* istanbul ignore next */++cov_w53fvlrtc.s[19];
        break;
      } /* istanbul ignore next */++cov_w53fvlrtc.s[20];

      if (found) {/* istanbul ignore next */++cov_w53fvlrtc.b[1][0];++cov_w53fvlrtc.s[21];
        break;
      } else /* istanbul ignore next */{++cov_w53fvlrtc.b[1][1];}
    } /* istanbul ignore next */++cov_w53fvlrtc.s[22];
    if (!found) {/* istanbul ignore next */++cov_w53fvlrtc.b[2][0];++cov_w53fvlrtc.s[23];
      completed = true;
    } else {/* istanbul ignore next */++cov_w53fvlrtc.b[2][1];++cov_w53fvlrtc.s[24];
      foundBy = { id: levelId.toString() }; /* istanbul ignore next */++cov_w53fvlrtc.s[25];
      foundBy[key] = null;
    }
  } /* istanbul ignore next */++cov_w53fvlrtc.s[26];

  return path;
}; /* istanbul ignore next */exports.default =

{
  getPathToLevelByName: function /* istanbul ignore next */getPathToLevelByName(name, tree) {/* istanbul ignore next */++cov_w53fvlrtc.f[1];
    var KEY = /* istanbul ignore next */(++cov_w53fvlrtc.s[27], 'title'); /* istanbul ignore next */++cov_w53fvlrtc.s[28];

    var decideFnc = function decideFnc(obj, foundBy, idEquals) {/* istanbul ignore next */++cov_w53fvlrtc.f[2];++cov_w53fvlrtc.s[29];
      if ( /* istanbul ignore next */(++cov_w53fvlrtc.b[4][0], obj[KEY] === foundBy[KEY]) || /* istanbul ignore next */(++cov_w53fvlrtc.b[4][1], idEquals)) {/* istanbul ignore next */++cov_w53fvlrtc.b[3][0];++cov_w53fvlrtc.s[30];
        // dont add to path if found but isnt really level at tree, but only leaf
        return tree[obj.id] != null;
      } else {/* istanbul ignore next */++cov_w53fvlrtc.b[3][1];++cov_w53fvlrtc.s[31];
        return null;
      }
    }; /* istanbul ignore next */++cov_w53fvlrtc.s[32];

    return findValueAtTreeAndGetPathToRoot(KEY, name, tree, decideFnc);
  },

  getPathToLevelBySymbolIdAndName: function /* istanbul ignore next */getPathToLevelBySymbolIdAndName(symbolId, name, tree) {/* istanbul ignore next */++cov_w53fvlrtc.f[3];
    var KEY = /* istanbul ignore next */(++cov_w53fvlrtc.s[33], 'symbolId');
    var KEY2 = /* istanbul ignore next */(++cov_w53fvlrtc.s[34], 'title'); /* istanbul ignore next */++cov_w53fvlrtc.s[35];

    var decideFnc = function decideFnc(obj, foundBy, idEquals) {/* istanbul ignore next */++cov_w53fvlrtc.f[4];
      var symbolIdEquals = /* istanbul ignore next */(++cov_w53fvlrtc.s[36], /* istanbul ignore next */(++cov_w53fvlrtc.b[5][0], obj.value[KEY] != null) && /* istanbul ignore next */(++cov_w53fvlrtc.b[5][1], obj.value[KEY] === foundBy[KEY]));
      var nameEquals = /* istanbul ignore next */(++cov_w53fvlrtc.s[37], obj[KEY2] === name);

      // if found correct symbol id (with corresponding name), do nothing, first
      // path crumb will be added at next loop iteration
      /* istanbul ignore next */++cov_w53fvlrtc.s[38];return (/* istanbul ignore next */(++cov_w53fvlrtc.b[7][0], symbolIdEquals) && /* istanbul ignore next */(++cov_w53fvlrtc.b[7][1], nameEquals) ? /* istanbul ignore next */(++cov_w53fvlrtc.b[6][0], false) : /* istanbul ignore next */(++cov_w53fvlrtc.b[6][1], idEquals ? /* istanbul ignore next */(++cov_w53fvlrtc.b[8][0], true) : /* istanbul ignore next */(++cov_w53fvlrtc.b[8][1], null)));
    }; /* istanbul ignore next */++cov_w53fvlrtc.s[39];

    return findValueAtTreeAndGetPathToRoot(KEY, symbolId, tree, decideFnc);
  },

  findValueAtTreeAndGetPathToRoot: findValueAtTreeAndGetPathToRoot };